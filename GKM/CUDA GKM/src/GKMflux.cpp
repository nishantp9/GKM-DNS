/****************************************************************************************
 * Flux evaluation using Gas-Kinetic scheme	
 * -------------------------------------------------------------------------------------*
 ****************************************************************************************/

#include "GKMflux.h"
#include <iostream>
/****************************************************************************************
 * Main flux function						
 ****************************************************************************************/

void flux(ptype W0[5], ptype DWx[5], ptype DWy[5],
			 ptype DWz[5],ptype mu, ptype dt, ptype dx, ptype F[5])
{	

	ptype Ux0, Uy0, Uz0, P0, den0, lam0, U0[3];
	
	c2p(W0, den0, Ux0, Uy0, Uz0, P0);
	lam0  = .5*den0/P0;
	U0[0] = Ux0; U0[1] = Uy0; U0[2] = Uz0;
	

/* ------------------------------------------------------------------*
 * INTEGRATIONS (MOMENT CALCULATIONS)		
 * ------------------------------------------------------------------*/

	ptype Ie0,Ie2,Ie4;
	ptype If[3][7];

	Ie0 = 1;
	Ie2 = K/(2*lam0);
	Ie4 = 3*K/(4*lam0*lam0) + K*(K-1)/(4*lam0*lam0);
	
	for (int j=0;j<3;j++)
	{
		If[j][0] = 1;
		If[j][1] = U0[j];
		for (int i=2;i<7;i++)
		{
			If[j][i] = U0[j]*If[j][i-1] + If[j][i-2]*(i-1)/(2*lam0);
		}
	}
	

// Tau calculation
	ptype tau;
   tau = mu/P0;

/* -------------------------------------------------*
 * Slope calculation						
 * -------------------------------------------------*/	
	ptype bx[5], by[5], bz[5], ax[5], ay[5], az[5];
	ptype Bx[5], By[5], Bz[5],  A[5],  B[5];
				
	for (int i=0;i<5;i++)
	{
		bx[i] = DWx[i]/den0;
		by[i] = DWy[i]/den0;
		bz[i] = DWz[i]/den0;
	}
	
	slopesolver(bx, U0, lam0, ax);
	slopesolver(by, U0, lam0, ay);
	slopesolver(bz, U0, lam0, az);

	
/****************************************
 ***************************************/	
	ptype val0, val1, val2, val3;
	ptype Mu_ax[5], Mv_ay[5], Mw_az[5], Mu_A[5], M[5], Mu2_ax[5], Muv_ay[5], Muw_az[5];
	
// Mu_ax Calculation
	
	val0	  = .5 * ( If[0][3] + If[0][1]*If[1][2] + If[0][1]*If[2][2] + If[0][1]*Ie2  );
	Mu_ax[0] = ax[0]*(If[0][1]) + ax[1]*(If[0][2]) + ax[2]*(If[0][1]*If[1][1]) + ax[3]*(If[0][1]*If[2][1]) + ax[4]*val0 ;	

				  
	val1    = .5 * ( If[0][4] + If[0][2]*If[1][2] + If[0][2]*If[2][2] + If[0][2]*Ie2  );
	Mu_ax[1] = ax[0]*(If[0][2]) + ax[1]*(If[0][3]) + ax[2]*(If[0][2]*If[1][1]) + ax[3]*(If[0][2]*If[2][1]) + ax[4]*val1;
				 

   val2    = .5 * ( If[0][3]*If[1][1] + If[0][1]*If[1][3] + If[0][1]*If[1][1]*If[2][2] + If[0][1]*If[1][1]*Ie2  );
	Mu_ax[2] = ax[0]*(If[0][1]*If[1][1]) + ax[1]*(If[0][2]*If[1][1]) + ax[2]*(If[0][1]*If[1][2]) + ax[3]*(If[0][1]*If[1][1]*If[2][1]) + ax[4]*val2;
				 
	
	val3    = .5 * ( If[0][3]*If[2][1] + If[0][1]*If[1][2]*If[2][1] + If[0][1]*If[2][3] + If[0][1]*If[2][1]*Ie2  );
	Mu_ax[3] = ax[0]*(If[0][1]*If[2][1]) + ax[1]*(If[0][2]*If[2][1]) + ax[2]*(If[0][1]*If[1][1]*If[2][1]) + ax[3]*(If[0][1]*If[2][2]) + ax[4]*val3;
				 


	Mu_ax[4] = .25*ax[4]* ( If[0][5] + If[0][1]*If[1][4] + If[0][1]*If[2][4] + Ie4*If[0][1] + 2*If[0][3]*If[1][2] + 2*If[0][3]*If[2][2] + 2*If[0][3]*Ie2 +
				  2*If[0][1]*If[1][2]*If[2][2] + 2*If[0][1]*If[1][2]*Ie2 + 2*If[0][1]*If[2][2]*Ie2 ) +
				  ax[0]*val0 + ax[1]*val1 + ax[2]*val2 + ax[3]*val3;
				  
	
// Mu2_ax Calculation
	
	val0	    = .5 * ( If[0][4] + If[0][2]*If[1][2] + If[0][2]*If[2][2] + If[0][2]*Ie2  );
	Mu2_ax[0] = ax[0]*(If[0][2]) + ax[1]*(If[0][3]) + ax[2]*(If[0][2]*If[1][1]) + ax[3]*(If[0][2]*If[2][1]) + ax[4]*val0 ;	

				  
	val1      = .5 * ( If[0][5] + If[0][3]*If[1][2] + If[0][3]*If[2][2] + If[0][3]*Ie2  );
	Mu2_ax[1] = ax[0]*(If[0][3]) + ax[1]*(If[0][4]) + ax[2]*(If[0][3]*If[1][1]) + ax[3]*(If[0][3]*If[2][1]) + ax[4]*val1;
				 

   val2      = .5 * ( If[0][4]*If[1][1] + If[0][2]*If[1][3] + If[0][2]*If[1][1]*If[2][2] + If[0][2]*If[1][1]*Ie2  );
	Mu2_ax[2] = ax[0]*(If[0][2]*If[1][1]) + ax[1]*(If[0][3]*If[1][1]) + ax[2]*(If[0][2]*If[1][2]) + ax[3]*(If[0][2]*If[1][1]*If[2][1]) + ax[4]*val2;
				 
	
	val3      = .5 * ( If[0][4]*If[2][1] + If[0][2]*If[1][2]*If[2][1] + If[0][2]*If[2][3] + If[0][2]*If[2][1]*Ie2  );
	Mu2_ax[3] = ax[0]*(If[0][2]*If[2][1]) + ax[1]*(If[0][3]*If[2][1]) + ax[2]*(If[0][2]*If[1][1]*If[2][1]) + ax[3]*(If[0][2]*If[2][2]) + ax[4]*val3;
				 


	Mu2_ax[4] = .25*ax[4]* ( If[0][6] + If[0][2]*If[1][4] + If[0][2]*If[2][4] + Ie4*If[0][2] + 2*If[0][4]*If[1][2] + 2*If[0][4]*If[2][2] + 2*If[0][4]*Ie2 +
				   2*If[0][2]*If[1][2]*If[2][2] + 2*If[0][2]*If[1][2]*Ie2 + 2*If[0][2]*If[2][2]*Ie2 ) +
				   ax[0]*val0 + ax[1]*val1 + ax[2]*val2 + ax[3]*val3;
				  
	


// Muv_ay Calculation
	
	val0	    = .5 * ( If[0][3]*If[1][1] + If[0][1]*If[1][3] + If[0][1]*If[1][1]*If[2][2] + If[0][1]*If[1][1]*Ie2  );
	Muv_ay[0] = ay[0]*(If[0][1]*If[1][1]) + ay[1]*(If[0][2]*If[1][1]) + ay[2]*(If[0][1]*If[1][2]) + ay[3]*(If[0][1]*If[1][1]*If[2][1]) + ay[4]*val0 ;	

				  
	val1      = .5 * ( If[0][4]*If[1][1] + If[0][2]*If[1][3] + If[0][2]*If[1][1]*If[2][2] + If[0][2]*If[1][1]*Ie2  );
	Muv_ay[1] = ay[0]*(If[0][2]*If[1][1]) + ay[1]*(If[0][3]*If[1][1]) + ay[2]*(If[0][2]*If[1][2]) + ay[3]*(If[0][2]*If[1][1]*If[2][1]) + ay[4]*val1;
				 

   val2      = .5 * ( If[0][3]*If[1][2] + If[0][1]*If[1][4] + If[0][1]*If[1][2]*If[2][2] + If[0][1]*If[1][2]*Ie2  );
	Muv_ay[2] = ay[0]*(If[0][1]*If[1][2]) + ay[1]*(If[0][2]*If[1][2]) + ay[2]*(If[0][1]*If[1][3]) + ay[3]*(If[0][1]*If[1][2]*If[2][1]) + ay[4]*val2;
				
	
	val3      = .5 * ( If[0][3]*If[1][1]*If[2][1] + If[0][1]*If[1][3]*If[2][1] + If[0][1]*If[1][1]*If[2][3] + If[0][1]*If[1][1]*If[2][1]*Ie2  );
	Muv_ay[3] = ay[0]*(If[0][1]*If[1][1]*If[2][1]) + ay[1]*(If[0][2]*If[1][1]*If[2][1]) + ay[2]*(If[0][1]*If[1][2]*If[2][1]) + ay[3]*(If[0][1]*If[1][1]*If[2][2]) + ay[4]*val3;
				 


	Muv_ay[4] = .25*ay[4]* ( If[0][5]*If[1][1] + If[0][1]*If[1][5] + If[0][1]*If[1][1]*If[2][4] + Ie4*If[0][1]*If[1][1] + 2*If[0][3]*If[1][3] + 2*If[0][3]*If[1][1]*If[2][2] + 2*If[0][3]*If[1][1]*Ie2 +
				   2*If[0][1]*If[1][3]*If[2][2] + 2*If[0][1]*If[1][3]*Ie2 + 2*If[0][1]*If[1][1]*If[2][2]*Ie2 ) +
				   ay[0]*val0 + ay[1]*val1 + ay[2]*val2 + ay[3]*val3;
				  


// Muw_az Calculation
	
	val0	    = .5 * ( If[0][3]*If[2][1] + If[0][1]*If[1][2]*If[2][1] + If[0][1]*If[2][3] + If[0][1]*If[2][1]*Ie2  );
	Muw_az[0] = az[0]*(If[0][1]*If[2][1]) + az[1]*(If[0][2]*If[2][1]) + az[2]*(If[0][1]*If[1][1]*If[2][1]) + az[3]*(If[0][1]*If[2][2]) + az[4]*val0 ;	

				  
	val1      = .5 * ( If[0][4]*If[2][1] + If[0][2]*If[1][2]*If[2][1] + If[0][2]*If[2][3] + If[0][2]*If[2][1]*Ie2  );
	Muw_az[1] = az[0]*(If[0][2]*If[2][1]) + az[1]*(If[0][3]*If[2][1]) + az[2]*(If[0][2]*If[1][1]*If[2][1]) + az[3]*(If[0][2]*If[2][2]) + az[4]*val1;
				 

   val2      = .5 * ( If[0][3]*If[1][1]*If[2][1] + If[0][1]*If[1][3]*If[2][1] + If[0][1]*If[1][1]*If[2][3] + If[0][1]*If[1][1]*If[2][1]*Ie2  );
	Muw_az[2] = az[0]*(If[0][1]*If[1][1]*If[2][1]) + az[1]*(If[0][2]*If[1][1]*If[2][1]) + az[2]*(If[0][1]*If[1][2]*If[2][1]) + az[3]*(If[0][1]*If[1][1]*If[2][2]) + az[4]*val2;
				 
	
	val3      = .5 * ( If[0][3]*If[2][2] + If[0][1]*If[1][2]*If[2][2] + If[0][1]*If[2][4] + If[0][1]*If[2][2]*Ie2  );
	Muw_az[3] = az[0]*(If[0][1]*If[2][2]) + az[1]*(If[0][2]*If[2][2]) + az[2]*(If[0][1]*If[1][1]*If[2][2]) + az[3]*(If[0][1]*If[2][3]) + az[4]*val3;
				 


	Muw_az[4] = .25*az[4]* ( If[0][5]*If[2][1] + If[0][1]*If[1][4]*If[2][1] + If[0][1]*If[2][5] + Ie4*If[0][1]*If[2][1] + 2*If[0][3]*If[1][2]*If[2][1] + 2*If[0][3]*If[2][3] + 2*If[0][3]*If[2][1]*Ie2 +
				  2*If[0][1]*If[1][2]*If[2][3] + 2*If[0][1]*If[1][2]*If[2][1]*Ie2 + 2*If[0][1]*If[2][3]*Ie2 ) +
				  az[0]*val0 + az[1]*val1 + az[2]*val2 + az[3]*val3;
	



// Mv_ay Calculation
	
	val0	   = .5 * ( If[0][2]*If[1][1] + If[1][3] + If[1][1]*If[2][2] + If[1][1]*Ie2  );
	Mv_ay[0] = ay[0]*(If[1][1]) + ay[1]*(If[0][1]*If[1][1]) + ay[2]*(If[1][2]) + ay[3]*(If[1][1]*If[2][1]) + ay[4]*val0 ;	
				  

	val1     = .5 * ( If[0][3]*If[1][1] + If[0][1]*If[1][3] + If[0][1]*If[1][1]*If[2][2] + If[0][1]*If[1][1]*Ie2  );
	Mv_ay[1] = ay[0]*(If[0][1]*If[1][1]) + ay[1]*(If[0][2]*If[1][1]) + ay[2]*(If[0][1]*If[1][2]) + ay[3]*(If[0][1]*If[1][1]*If[2][1]) + ay[4]*val1;
				 

   val2     = .5 * ( If[0][2]*If[1][2] + If[1][4] + If[1][2]*If[2][2] + If[1][2]*Ie2  );
	Mv_ay[2] = ay[0]*(If[1][2]) + ay[1]*(If[0][1]*If[1][2]) + ay[2]*(If[1][3]) + ay[3]*(If[1][2]*If[2][1]) + ay[4]*val2;
				 
	
	val3     = .5 * ( If[0][2]*If[1][1]*If[2][1] + If[1][3]*If[2][1] + If[1][1]*If[2][3] + If[1][1]*If[2][1]*Ie2  );
	Mv_ay[3] = ay[0]*(If[1][1]*If[2][1]) + ay[1]*(If[0][1]*If[1][1]*If[2][1]) + ay[2]*(If[1][2]*If[2][1]) + ay[3]*(If[1][1]*If[2][2]) + ay[4]*val3;

	
	Mv_ay[4] = .25*ay[4]* ( If[0][4]*If[1][1] + If[1][5] + If[1][1]*If[2][4] + Ie4*If[1][1] + 2*If[0][2]*If[1][3] + 2*If[0][2]*If[1][1]*If[2][2] + 2*If[0][2]*If[1][1]*Ie2 +
				  2*If[1][3]*If[2][2] + 2*If[1][3]*Ie2 + 2*If[1][1]*If[2][2]*Ie2 ) +
				  ay[0]*val0 + ay[1]*val1 + ay[2]*val2 + ay[3]*val3;
				  

// Mw_az Calculation
	
	val0	   = .5 * ( If[0][2]*If[2][1] + If[1][2]*If[2][1] + If[2][3] + If[2][1]*Ie2  );
	Mw_az[0] = az[0]*(If[2][1]) + az[1]*(If[0][1]*If[2][1]) + az[2]*(If[1][1]*If[2][1]) + az[3]*(If[2][2]) + az[4]*val0 ;	
				  

	val1     = .5 * ( If[0][3]*If[2][1] + If[0][1]*If[1][2]*If[2][1] + If[0][1]*If[2][3] + If[0][1]*If[2][1]*Ie2  );
	Mw_az[1] = az[0]*(If[0][1]*If[2][1]) + az[1]*(If[0][2]*If[2][1]) + az[2]*(If[0][1]*If[1][1]*If[2][1]) + az[3]*(If[0][1]*If[2][2]) + az[4]*val1;
				 

   val2     = .5 * ( If[0][2]*If[1][1]*If[2][1] + If[1][3]*If[2][1] + If[1][1]*If[2][3] + If[1][1]*If[2][1]*Ie2  );
	Mw_az[2] = az[0]*(If[1][1]*If[2][1]) + az[1]*(If[0][1]*If[1][1]*If[2][1]) + az[2]*(If[1][2]*If[2][1]) + az[3]*(If[1][1]*If[2][2]) + az[4]*val2;
				 
	
	val3     = .5 * ( If[0][2]*If[2][2] + If[1][2]*If[2][2] + If[2][4] + If[2][2]*Ie2  );
	Mw_az[3] = az[0]*(If[2][2]) + az[1]*(If[0][1]*If[2][2]) + az[2]*(If[1][1]*If[2][2]) + az[3]*(If[2][3]) + az[4]*val3;
				 


	Mw_az[4] = .25*az[4]* ( If[0][4]*If[2][1] + If[1][4]*If[2][1] + If[2][5] + Ie4*If[2][1] + 2*If[0][2]*If[1][2]*If[2][1] + 2*If[0][2]*If[2][3] + 2*If[0][2]*If[2][1]*Ie2 +
				  2*If[1][2]*If[2][3] + 2*If[1][2]*If[2][1]*Ie2 + 2*If[2][3]*Ie2 ) +
				  az[0]*val0 + az[1]*val1 + az[2]*val2 + az[3]*val3;
	

// M Calculation
   val0	  = .5 * ( If[0][3] + If[0][1]*If[1][2] + If[0][1]*If[2][2] + If[0][1]*Ie2  );
		
	M[0] = If[0][1];
	M[1] = If[0][2];
	M[2] = If[0][1]*If[1][1];
	M[3] = If[0][1]*If[2][1];
	M[4] = val0;


// A Calculation

	for (int i = 0; i < 5; i++)
	{
		B[i] = -Mu_ax[i] - Mv_ay[i] - Mw_az[i];
	}
	slopesolver(B,U0,lam0,A);

// Mu_A Calculation
	
	val0	  = .5 * ( If[0][3] + If[0][1]*If[1][2] + If[0][1]*If[2][2] + If[0][1]*Ie2  );
	Mu_A[0] = A[0]*(If[0][1]) + A[1]*(If[0][2]) + A[2]*(If[0][1]*If[1][1]) + A[3]*(If[0][1]*If[2][1]) + A[4]*val0 ;	

				  
	val1    = .5 * ( If[0][4] + If[0][2]*If[1][2] + If[0][2]*If[2][2] + If[0][2]*Ie2  );
	Mu_A[1] = A[0]*(If[0][2]) + A[1]*(If[0][3]) + A[2]*(If[0][2]*If[1][1]) + A[3]*(If[0][2]*If[2][1]) + A[4]*val1;
				 

   val2    = .5 * ( If[0][3]*If[1][1] + If[0][1]*If[1][3] + If[0][1]*If[1][1]*If[2][2] + If[0][1]*If[1][1]*Ie2  );
	Mu_A[2] = A[0]*(If[0][1]*If[1][1]) + A[1]*(If[0][2]*If[1][1]) + A[2]*(If[0][1]*If[1][2]) + A[3]*(If[0][1]*If[1][1]*If[2][1]) + A[4]*val2;
				 
	
	val3    = .5 * ( If[0][3]*If[2][1] + If[0][1]*If[1][2]*If[2][1] + If[0][1]*If[2][3] + If[0][1]*If[2][1]*Ie2  );
	Mu_A[3] = A[0]*(If[0][1]*If[2][1]) + A[1]*(If[0][2]*If[2][1]) + A[2]*(If[0][1]*If[1][1]*If[2][1]) + A[3]*(If[0][1]*If[2][2]) + A[4]*val3;
				 


	Mu_A[4] = .25*A[4]* ( If[0][5] + If[0][1]*If[1][4] + If[0][1]*If[2][4] + Ie4*If[0][1] + 2*If[0][3]*If[1][2] + 2*If[0][3]*If[2][2] + 2*If[0][3]*Ie2 +
				  2*If[0][1]*If[1][2]*If[2][2] + 2*If[0][1]*If[1][2]*Ie2 + 2*If[0][1]*If[2][2]*Ie2 ) +
				  A[0]*val0 + A[1]*val1 + A[2]*val2 + A[3]*val3;

	
/* ----------------------------------------------*
 * Flux calculation	
 * ----------------------------------------------*/

// integral dt
	ptype C0  = den0;
	ptype p0, p1, p2;
	p0 = dt;	p1 = -tau*dt;	p2 = dt*dt/2;
	
	FOR(i, 5)
		F[i]=0;

/***************************************************************************************************************************/

	FOR(i, 5) {
		F[i] = C0 * ( (p1+p2)*Mu_A[i] + p1*Mu2_ax[i] + p1*Muv_ay[i] + p1*Muw_az[i] +  p0*M[i]);  
	}

}

/****************************************************************************************
 * Main flux functions ends here
 ****************************************************************************************/

/* ----------------------------------------------------------------------*
 *  SLOPE SOLVER  				
 * ----------------------------------------------------------------------*/

void slopesolver(ptype b[5], ptype U[3], ptype lam, ptype a[5])
{
	ptype R2, R3, R4, R5;
	
	R2 = b[1] - U[0]*b[0];
	R3 = b[2] - U[1]*b[0];
	R4 = b[3] - U[2]*b[0];
	R5 = 2*b[4] - b[0]*(U[0]*U[0]+U[1]*U[1]+U[2]*U[2]+(K+3)/(2*lam));
	
	a[4] = (1/PRN)*(R5-2*U[0]*R2-2*U[1]*R3-2*U[2]*R4)*(4*lam*lam)/(K+3);
	a[3] = 2*lam*R4 - U[2]*a[4];
	a[2] = 2*lam*R3 - U[1]*a[4];
	a[1] = 2*lam*R2 - U[0]*a[4];
	a[0] = b[0] - a[1]*U[0] - a[2]*U[1] -a[3]*U[2]-.5*a[4]*(U[0]*U[0] +
	       U[1]*U[1] + U[2]*U[2]+(K+3)/(2*lam));

}

/* ----------------------------------------------------------------------*
 *  Moment - Matrix - Multiplication
 * ----------------------------------------------------------------------*/

void mult(ptype M[5][2], int k, ptype C, ptype B[5])
{
	for (int i=0;i<5;i++)
	{
		B[i]=C*M[i][k];
	}
}

void Mult(ptype M[5][5], ptype C, ptype A[5], ptype B[5])
{
	B[0]=0;B[1]=0;B[2]=0;B[3]=0;B[4]=0;
	
	for (int i=0;i<5;i++)
	{
		B[i]=B[i]+C*M[i][i]*A[i];
		for (int j=i+1;j<5;j++)
		{
			B[i]=B[i]+C*M[i][j]*A[j];
			B[j]=B[j]+C*M[i][j]*A[i];
		}
	}
}

/* -------------------------------------------------------------------------*
 * Conservative  --->  Primitive conversion
 * -------------------------------------------------------------------------*/
void c2p(ptype W[5], ptype &den, ptype &Ux, ptype &Uy, ptype &Uz, ptype &P)
{
	den = W[0];
	Ux  = W[1]/den;
	Uy  = W[2]/den;
	Uz  = W[3]/den;
	P   = (den*(gam-1))*(W[4]/den - .5*(Ux*Ux+Uy*Uy+Uz*Uz));
}

// Vector Addition function
void add(ptype A[5], ptype B[5])
{
	for (int i=0;i<5;i++)
	{
		B[i]=A[i]+B[i];
	}
}

/****************************************************************************************
 * ---------------------------------  END  ---------------------------------------------*
 ****************************************************************************************/
